
urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000a14  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  008000c0  008000c0  00000b08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001795  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2a  00000000  00000000  00002489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d81  00000000  00000000  00002eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00003c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ae  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a31  00000000  00000000  0000465a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000508b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3f       	cpi	r26, 0xF4	; 244
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
  8a:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	c7 9a       	sbi	0x18, 7	; 24
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	c7 98       	cbi	0x18, 7	; 24
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	c8 2f       	mov	r28, r24
  9e:	66 23       	and	r22, r22
  a0:	11 f0       	breq	.+4      	; 0xa6 <lcd_write+0xc>
  a2:	c5 9a       	sbi	0x18, 5	; 24
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0xe>
  a6:	c5 98       	cbi	0x18, 5	; 24
  a8:	c6 98       	cbi	0x18, 6	; 24
  aa:	d4 9a       	sbi	0x1a, 4	; 26
  ac:	d5 9a       	sbi	0x1a, 5	; 26
  ae:	d6 9a       	sbi	0x1a, 6	; 26
  b0:	d7 9a       	sbi	0x1a, 7	; 26
  b2:	df 98       	cbi	0x1b, 7	; 27
  b4:	de 98       	cbi	0x1b, 6	; 27
  b6:	dd 98       	cbi	0x1b, 5	; 27
  b8:	dc 98       	cbi	0x1b, 4	; 27
  ba:	cc 23       	and	r28, r28
  bc:	0c f4       	brge	.+2      	; 0xc0 <lcd_write+0x26>
  be:	df 9a       	sbi	0x1b, 7	; 27
  c0:	c6 fd       	sbrc	r28, 6
  c2:	de 9a       	sbi	0x1b, 6	; 27
  c4:	c5 fd       	sbrc	r28, 5
  c6:	dd 9a       	sbi	0x1b, 5	; 27
  c8:	c4 fd       	sbrc	r28, 4
  ca:	dc 9a       	sbi	0x1b, 4	; 27
  cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d0:	df 98       	cbi	0x1b, 7	; 27
  d2:	de 98       	cbi	0x1b, 6	; 27
  d4:	dd 98       	cbi	0x1b, 5	; 27
  d6:	dc 98       	cbi	0x1b, 4	; 27
  d8:	c3 fd       	sbrc	r28, 3
  da:	df 9a       	sbi	0x1b, 7	; 27
  dc:	c2 fd       	sbrc	r28, 2
  de:	de 9a       	sbi	0x1b, 6	; 27
  e0:	c1 fd       	sbrc	r28, 1
  e2:	dd 9a       	sbi	0x1b, 5	; 27
  e4:	c0 fd       	sbrc	r28, 0
  e6:	dc 9a       	sbi	0x1b, 4	; 27
  e8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ec:	dc 9a       	sbi	0x1b, 4	; 27
  ee:	dd 9a       	sbi	0x1b, 5	; 27
  f0:	de 9a       	sbi	0x1b, 6	; 27
  f2:	df 9a       	sbi	0x1b, 7	; 27
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <lcd_read>:
  f8:	88 23       	and	r24, r24
  fa:	11 f0       	breq	.+4      	; 0x100 <lcd_read+0x8>
  fc:	c5 9a       	sbi	0x18, 5	; 24
  fe:	01 c0       	rjmp	.+2      	; 0x102 <lcd_read+0xa>
 100:	c5 98       	cbi	0x18, 5	; 24
 102:	c6 9a       	sbi	0x18, 6	; 24
 104:	d4 98       	cbi	0x1a, 4	; 26
 106:	d5 98       	cbi	0x1a, 5	; 26
 108:	d6 98       	cbi	0x1a, 6	; 26
 10a:	d7 98       	cbi	0x1a, 7	; 26
 10c:	c7 9a       	sbi	0x18, 7	; 24
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x18>
 110:	cc 9b       	sbis	0x19, 4	; 25
 112:	02 c0       	rjmp	.+4      	; 0x118 <lcd_read+0x20>
 114:	80 e1       	ldi	r24, 0x10	; 16
 116:	01 c0       	rjmp	.+2      	; 0x11a <lcd_read+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	cd 99       	sbic	0x19, 5	; 25
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	ce 99       	sbic	0x19, 6	; 25
 120:	80 64       	ori	r24, 0x40	; 64
 122:	cf 99       	sbic	0x19, 7	; 25
 124:	80 68       	ori	r24, 0x80	; 128
 126:	c7 98       	cbi	0x18, 7	; 24
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x32>
 12a:	c7 9a       	sbi	0x18, 7	; 24
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x36>
 12e:	cc 99       	sbic	0x19, 4	; 25
 130:	81 60       	ori	r24, 0x01	; 1
 132:	cd 99       	sbic	0x19, 5	; 25
 134:	82 60       	ori	r24, 0x02	; 2
 136:	ce 99       	sbic	0x19, 6	; 25
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	cf 99       	sbic	0x19, 7	; 25
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	c7 98       	cbi	0x18, 7	; 24
 140:	08 95       	ret

00000142 <lcd_waitbusy>:
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 148:	88 23       	and	r24, r24
 14a:	dc f3       	brlt	.-10     	; 0x142 <lcd_waitbusy>
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_waitbusy+0xe>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 15a:	08 95       	ret

0000015c <lcd_command>:
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_gotoxy>:
 170:	61 11       	cpse	r22, r1
 172:	04 c0       	rjmp	.+8      	; 0x17c <lcd_gotoxy+0xc>
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 17a:	08 95       	ret
 17c:	80 54       	subi	r24, 0x40	; 64
 17e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 182:	08 95       	ret

00000184 <lcd_clrscr>:
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_putc>:
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
 190:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
 194:	ca 30       	cpi	r28, 0x0A	; 10
 196:	49 f4       	brne	.+18     	; 0x1aa <lcd_putc+0x1e>
 198:	80 34       	cpi	r24, 0x40	; 64
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <lcd_putc+0x14>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <lcd_putc+0x16>
 1a0:	80 e4       	ldi	r24, 0x40	; 64
 1a2:	80 58       	subi	r24, 0x80	; 128
 1a4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <lcd_putc+0x26>
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8c 2f       	mov	r24, r28
 1ae:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_puts>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	29 f0       	breq	.+10     	; 0x1d0 <lcd_puts+0x1a>
 1c6:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_putc>
 1ca:	89 91       	ld	r24, Y+
 1cc:	81 11       	cpse	r24, r1
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <lcd_puts+0x10>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1de:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1e0:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1e2:	bf 9a       	sbi	0x17, 7	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e4:	d4 9a       	sbi	0x1a, 4	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1e6:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e8:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ea:	d7 9a       	sbi	0x1a, 7	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	93 e7       	ldi	r25, 0x73	; 115
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1f4:	dd 9a       	sbi	0x1b, 5	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1f6:	dc 9a       	sbi	0x1b, 4	; 27
    lcd_e_toggle();
 1f8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	93 e2       	ldi	r25, 0x23	; 35
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 204:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	c5 e7       	ldi	r28, 0x75	; 117
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	ce 01       	movw	r24, r28
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 212:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 216:	ce 01       	movw	r24, r28
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 21c:	dc 98       	cbi	0x1b, 4	; 27
    lcd_e_toggle();
 21e:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 222:	21 97       	sbiw	r28, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 226:	88 e2       	ldi	r24, 0x28	; 40
 228:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 232:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 23c:	81 2f       	mov	r24, r17
 23e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>

}/* lcd_init */
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	08 95       	ret

0000024a <__vector_1>:
	if(startBuzzing == 0) startBuzzing = 1;
}
void buzzing(){
	if(startBuzzing == 1){
		if((distance1 >= buzzingDistance) && (distance2 >= buzzingDistance)) buzzerPORT = 0x01;
		else buzzerPORT = 0x00;
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	8f 93       	push	r24
 256:	9f 93       	push	r25
 258:	af 93       	push	r26
 25a:	bf 93       	push	r27
 25c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <interrupt0Turn>
 260:	81 11       	cpse	r24, r1
 262:	07 c0       	rjmp	.+14     	; 0x272 <__vector_1+0x28>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <interrupt0Turn>
 26a:	8e b5       	in	r24, 0x2e	; 46
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	8e bd       	out	0x2e, r24	; 46
 270:	11 c0       	rjmp	.+34     	; 0x294 <__vector_1+0x4a>
 272:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <interrupt0Turn>
 276:	8c b5       	in	r24, 0x2c	; 44
 278:	9d b5       	in	r25, 0x2d	; 45
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 282:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__data_end+0x1>
 286:	a0 93 c2 00 	sts	0x00C2, r26	; 0x8000c2 <__data_end+0x2>
 28a:	b0 93 c3 00 	sts	0x00C3, r27	; 0x8000c3 <__data_end+0x3>
 28e:	1e bc       	out	0x2e, r1	; 46
 290:	1d bc       	out	0x2d, r1	; 45
 292:	1c bc       	out	0x2c, r1	; 44
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_8>:
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
 2b4:	af 93       	push	r26
 2b6:	bf 93       	push	r27
 2b8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <timerOverflow>
 2bc:	90 91 d8 00 	lds	r25, 0x00D8	; 0x8000d8 <timerOverflow+0x1>
 2c0:	a0 91 d9 00 	lds	r26, 0x00D9	; 0x8000d9 <timerOverflow+0x2>
 2c4:	b0 91 da 00 	lds	r27, 0x00DA	; 0x8000da <timerOverflow+0x3>
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	a1 1d       	adc	r26, r1
 2cc:	b1 1d       	adc	r27, r1
 2ce:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <timerOverflow>
 2d2:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <timerOverflow+0x1>
 2d6:	a0 93 d9 00 	sts	0x00D9, r26	; 0x8000d9 <timerOverflow+0x2>
 2da:	b0 93 da 00 	sts	0x00DA, r27	; 0x8000da <timerOverflow+0x3>
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <resetData>:
 2f0:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <timerOverflow>
 2f4:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <timerOverflow+0x1>
 2f8:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <timerOverflow+0x2>
 2fc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <timerOverflow+0x3>
 300:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <count1>
 304:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <count1+0x1>
 308:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <count1+0x2>
 30c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <count1+0x3>
 310:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__data_end>
 314:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_end+0x1>
 318:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end+0x2>
 31c:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__data_end+0x3>
 320:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <distance1+0x1>
 324:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <distance1>
 328:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <distance2+0x1>
 32c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <distance2>
 330:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <interrupt0Turn>
 334:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <sensorTurn>
 338:	8f e0       	ldi	r24, 0x0F	; 15
 33a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <buzzingDistance>
 33e:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <startBuzzing>
 342:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <string1>
 346:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <string2>
 34a:	08 95       	ret

0000034c <initializeBuzzer>:
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	84 bb       	out	0x14, r24	; 20
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	85 bb       	out	0x15, r24	; 21
 354:	08 95       	ret

00000356 <initializeDisplay>:
 356:	80 e1       	ldi	r24, 0x10	; 16
 358:	81 bb       	out	0x11, r24	; 17
 35a:	12 ba       	out	0x12, r1	; 18
 35c:	8c e0       	ldi	r24, 0x0C	; 12
 35e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_init>
 362:	08 95       	ret

00000364 <initializeTriggerPins>:
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	8a bb       	out	0x1a, r24	; 26
 368:	1b ba       	out	0x1b, r1	; 27
 36a:	08 95       	ret

0000036c <initializeButtons>:
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	87 bb       	out	0x17, r24	; 23
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	88 bb       	out	0x18, r24	; 24
 374:	08 95       	ret

00000376 <initializeInterruptRegisters>:
 376:	84 e0       	ldi	r24, 0x04	; 4
 378:	89 bf       	out	0x39, r24	; 57
 37a:	1f bc       	out	0x2f, r1	; 47
 37c:	8b b7       	in	r24, 0x3b	; 59
 37e:	80 64       	ori	r24, 0x40	; 64
 380:	8b bf       	out	0x3b, r24	; 59
 382:	85 b7       	in	r24, 0x35	; 53
 384:	81 60       	ori	r24, 0x01	; 1
 386:	85 bf       	out	0x35, r24	; 53
 388:	78 94       	sei
 38a:	08 95       	ret

0000038c <reinitializeRegisters>:
 38c:	1f bc       	out	0x2f, r1	; 47
 38e:	1e bc       	out	0x2e, r1	; 46
 390:	1d bc       	out	0x2d, r1	; 45
 392:	1c bc       	out	0x2c, r1	; 44
 394:	08 95       	ret

00000396 <reinitializeCounterValues>:
 396:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <count1>
 39a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <count1+0x1>
 39e:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <count1+0x2>
 3a2:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <count1+0x3>
 3a6:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <distance1+0x1>
 3aa:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <distance1>
 3ae:	08 95       	ret

000003b0 <setDisplayRegisterValues>:
 3b0:	81 e2       	ldi	r24, 0x21	; 33
 3b2:	8f bd       	out	0x2f, r24	; 47
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
 3b6:	8e bd       	out	0x2e, r24	; 46
 3b8:	80 e6       	ldi	r24, 0x60	; 96
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	99 bd       	out	0x29, r25	; 41
 3be:	88 bd       	out	0x28, r24	; 40
 3c0:	08 95       	ret

000003c2 <printValues>:
 3c2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
 3c6:	4a e0       	ldi	r20, 0x0A	; 10
 3c8:	6d ed       	ldi	r22, 0xDD	; 221
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <distance1>
 3d0:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <distance1+0x1>
 3d4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__itoa_ncheck>
 3d8:	4a e0       	ldi	r20, 0x0A	; 10
 3da:	67 ec       	ldi	r22, 0xC7	; 199
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <distance2>
 3e2:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <distance2+0x1>
 3e6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__itoa_ncheck>
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
 3f2:	8d ed       	ldi	r24, 0xDD	; 221
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
 402:	87 ec       	ldi	r24, 0xC7	; 199
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 40a:	08 95       	ret

0000040c <splashScreen>:
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	8f e7       	ldi	r24, 0x7F	; 127
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	21 50       	subi	r18, 0x01	; 1
 414:	80 40       	sbci	r24, 0x00	; 0
 416:	90 40       	sbci	r25, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <splashScreen+0x6>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <splashScreen+0x10>
 41c:	00 00       	nop
 41e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <setDisplayRegisterValues>
 422:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
 42e:	80 e6       	ldi	r24, 0x60	; 96
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
 43e:	8c e6       	ldi	r24, 0x6C	; 108
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	8f eb       	ldi	r24, 0xBF	; 191
 44a:	91 e2       	ldi	r25, 0x21	; 33
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <splashScreen+0x40>
 454:	00 c0       	rjmp	.+0      	; 0x456 <splashScreen+0x4a>
 456:	00 00       	nop
 458:	08 95       	ret

0000045a <setStartBuzzing>:
 45a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <startBuzzing>
 45e:	81 11       	cpse	r24, r1
 460:	03 c0       	rjmp	.+6      	; 0x468 <__stack+0x9>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <startBuzzing>
 468:	08 95       	ret

0000046a <addToBuzzingDistance>:
	}
}
void addToBuzzingDistance(){
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	60 97       	sbiw	r28, 0x10	; 16
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
	char buzzingString[16];
	setDisplayRegisterValues();
 47e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <setDisplayRegisterValues>
	lcd_clrscr();
 482:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
	
	if(buzzingDistance <= maximumDistance){
 486:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <buzzingDistance>
 48a:	89 31       	cpi	r24, 0x19	; 25
 48c:	78 f4       	brcc	.+30     	; 0x4ac <addToBuzzingDistance+0x42>
		buzzingDistance += 1;
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <buzzingDistance>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 494:	4a e0       	ldi	r20, 0x0A	; 10
 496:	be 01       	movw	r22, r28
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__itoa_ncheck>
		itoa(buzzingDistance,buzzingString,10);
		lcd_puts("Range increased");
 4a2:	8d e7       	ldi	r24, 0x7D	; 125
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 4aa:	09 c0       	rjmp	.+18     	; 0x4be <addToBuzzingDistance+0x54>
	}else{
		strncpy(buzzingString, "Maximum distance", 16);
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	ed e8       	ldi	r30, 0x8D	; 141
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	de 01       	movw	r26, r28
 4b4:	11 96       	adiw	r26, 0x01	; 1
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <addToBuzzingDistance+0x4c>
	}
	
	lcd_gotoxy(7, 1);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	87 e0       	ldi	r24, 0x07	; 7
 4c2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
	lcd_puts(buzzingString);
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	8f e3       	ldi	r24, 0x3F	; 63
 4d2:	9b e0       	ldi	r25, 0x0B	; 11
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <addToBuzzingDistance+0x6a>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <addToBuzzingDistance+0x74>
 4de:	00 00       	nop
	_delay_ms(500);
}
 4e0:	60 96       	adiw	r28, 0x10	; 16
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <subtractFromBuzzingDistance>:
void subtractFromBuzzingDistance(){
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	60 97       	sbiw	r28, 0x10	; 16
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
	char buzzingString[16];
	setDisplayRegisterValues();
 506:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <setDisplayRegisterValues>
	lcd_clrscr();
 50a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_clrscr>
	
	if(buzzingDistance >= minimumDistance){
 50e:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <buzzingDistance>
 512:	86 30       	cpi	r24, 0x06	; 6
 514:	78 f0       	brcs	.+30     	; 0x534 <subtractFromBuzzingDistance+0x42>
		buzzingDistance -= 1;
 516:	81 50       	subi	r24, 0x01	; 1
 518:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <buzzingDistance>
 51c:	4a e0       	ldi	r20, 0x0A	; 10
 51e:	be 01       	movw	r22, r28
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__itoa_ncheck>
		itoa(buzzingDistance,buzzingString,10);
		lcd_puts("Range decreased");
 52a:	8e e9       	ldi	r24, 0x9E	; 158
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 532:	09 c0       	rjmp	.+18     	; 0x546 <subtractFromBuzzingDistance+0x54>
	}else{
		strncpy(buzzingString, "Minimum distance", 16);
 534:	80 e1       	ldi	r24, 0x10	; 16
 536:	ee ea       	ldi	r30, 0xAE	; 174
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	de 01       	movw	r26, r28
 53c:	11 96       	adiw	r26, 0x01	; 1
 53e:	01 90       	ld	r0, Z+
 540:	0d 92       	st	X+, r0
 542:	8a 95       	dec	r24
 544:	e1 f7       	brne	.-8      	; 0x53e <subtractFromBuzzingDistance+0x4c>
	}
	
	lcd_gotoxy(7, 1);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_gotoxy>
	lcd_puts(buzzingString);
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_puts>
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	8f e3       	ldi	r24, 0x3F	; 63
 55a:	9b e0       	ldi	r25, 0x0B	; 11
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <subtractFromBuzzingDistance+0x6a>
 564:	00 c0       	rjmp	.+0      	; 0x566 <subtractFromBuzzingDistance+0x74>
 566:	00 00       	nop
	_delay_ms(500);
}
 568:	60 96       	adiw	r28, 0x10	; 16
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <buttonPress>:
void buttonPress(){
	if(bit_is_clear(PINB, 0)) addToBuzzingDistance();
 57a:	b0 99       	sbic	0x16, 0	; 22
 57c:	03 c0       	rjmp	.+6      	; 0x584 <buttonPress+0xa>
 57e:	0e 94 35 02 	call	0x46a	; 0x46a <addToBuzzingDistance>
 582:	08 95       	ret
	else if(bit_is_clear(PINB, 1)) subtractFromBuzzingDistance();
 584:	b1 9b       	sbis	0x16, 1	; 22
 586:	0e 94 79 02 	call	0x4f2	; 0x4f2 <subtractFromBuzzingDistance>
 58a:	08 95       	ret

0000058c <shortPulse>:
}

// sensor
void shortPulse(uint8_t triggerPin){
	triggerPORT |= triggerPin;
 58c:	9b b3       	in	r25, 0x1b	; 27
 58e:	98 2b       	or	r25, r24
 590:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 592:	98 e1       	ldi	r25, 0x18	; 24
 594:	9a 95       	dec	r25
 596:	f1 f7       	brne	.-4      	; 0x594 <shortPulse+0x8>
 598:	00 c0       	rjmp	.+0      	; 0x59a <shortPulse+0xe>
	_delay_us(10);
	triggerPORT &= (~triggerPin);
 59a:	9b b3       	in	r25, 0x1b	; 27
 59c:	80 95       	com	r24
 59e:	89 23       	and	r24, r25
 5a0:	8b bb       	out	0x1b, r24	; 27
 5a2:	08 95       	ret

000005a4 <risingEdge>:
}
void risingEdge(){
	TCCR1B = 0x41; // rising edge, no prescaler
 5a4:	81 e4       	ldi	r24, 0x41	; 65
 5a6:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1 << ICF1; //clear input capture flag
 5a8:	80 e2       	ldi	r24, 0x20	; 32
 5aa:	88 bf       	out	0x38, r24	; 56
 5ac:	08 95       	ret

000005ae <fallingEdge>:
}
void fallingEdge(){
	TCNT1 = 0; //timer/counter1 value
 5ae:	1d bc       	out	0x2d, r1	; 45
 5b0:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01; // falling edge, no prescaler
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1 << ICF1; //clear input capture flag
 5b6:	80 e2       	ldi	r24, 0x20	; 32
 5b8:	88 bf       	out	0x38, r24	; 56
	timerOverflow = 0;
 5ba:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <timerOverflow>
 5be:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <timerOverflow+0x1>
 5c2:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <timerOverflow+0x2>
 5c6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <timerOverflow+0x3>
 5ca:	08 95       	ret

000005cc <waitingForSignal>:
}
void waitingForSignal(){
	while ((TIFR & (1 << ICF1)) == 0);
 5cc:	08 b6       	in	r0, 0x38	; 56
 5ce:	05 fe       	sbrs	r0, 5
 5d0:	fd cf       	rjmp	.-6      	; 0x5cc <waitingForSignal>
}
 5d2:	08 95       	ret

000005d4 <setSensorTurn>:

//variables
void setSensorTurn(){
	if(sensorTurn == 0) sensorTurn = 1;
 5d4:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <sensorTurn>
 5d8:	81 11       	cpse	r24, r1
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <setSensorTurn+0x10>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <sensorTurn>
 5e2:	08 95       	ret
	else sensorTurn = 0;
 5e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <sensorTurn>
 5e8:	08 95       	ret

000005ea <calculateDistance>:
}
void calculateDistance(){
	if(sensorTurn == 0){
 5ea:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <sensorTurn>
 5ee:	81 11       	cpse	r24, r1
 5f0:	29 c0       	rjmp	.+82     	; 0x644 <calculateDistance+0x5a>
		count1 = ICR1 + (65535 * timerOverflow);
 5f2:	e6 b5       	in	r30, 0x26	; 38
 5f4:	f7 b5       	in	r31, 0x27	; 39
 5f6:	20 91 d7 00 	lds	r18, 0x00D7	; 0x8000d7 <timerOverflow>
 5fa:	30 91 d8 00 	lds	r19, 0x00D8	; 0x8000d8 <timerOverflow+0x1>
 5fe:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <timerOverflow+0x2>
 602:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <timerOverflow+0x3>
 606:	af ef       	ldi	r26, 0xFF	; 255
 608:	bf ef       	ldi	r27, 0xFF	; 255
 60a:	0e 94 b9 04 	call	0x972	; 0x972 <__muluhisi3>
 60e:	6e 0f       	add	r22, r30
 610:	7f 1f       	adc	r23, r31
 612:	81 1d       	adc	r24, r1
 614:	91 1d       	adc	r25, r1
 616:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <count1>
 61a:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <count1+0x1>
 61e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <count1+0x2>
 622:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <count1+0x3>
		distance1 = (uint32_t)(count1 / calculationConstant);
 626:	0e 94 2b 04 	call	0x856	; 0x856 <__floatunsisf>
 62a:	2d ec       	ldi	r18, 0xCD	; 205
 62c:	3c ee       	ldi	r19, 0xEC	; 236
 62e:	47 ed       	ldi	r20, 0xD7	; 215
 630:	53 e4       	ldi	r21, 0x43	; 67
 632:	0e 94 8a 03 	call	0x714	; 0x714 <__divsf3>
 636:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fixunssfsi>
 63a:	70 93 dc 00 	sts	0x00DC, r23	; 0x8000dc <distance1+0x1>
 63e:	60 93 db 00 	sts	0x00DB, r22	; 0x8000db <distance1>
 642:	08 95       	ret
	}else distance2 = (uint32_t)(count2 / calculationConstant);
 644:	60 91 c0 00 	lds	r22, 0x00C0	; 0x8000c0 <__data_end>
 648:	70 91 c1 00 	lds	r23, 0x00C1	; 0x8000c1 <__data_end+0x1>
 64c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end+0x2>
 650:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <__data_end+0x3>
 654:	0e 94 2b 04 	call	0x856	; 0x856 <__floatunsisf>
 658:	2d ec       	ldi	r18, 0xCD	; 205
 65a:	3c ee       	ldi	r19, 0xEC	; 236
 65c:	47 ed       	ldi	r20, 0xD7	; 215
 65e:	53 e4       	ldi	r21, 0x43	; 67
 660:	0e 94 8a 03 	call	0x714	; 0x714 <__divsf3>
 664:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fixunssfsi>
 668:	70 93 ee 00 	sts	0x00EE, r23	; 0x8000ee <distance2+0x1>
 66c:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <distance2>
 670:	08 95       	ret

00000672 <mainLoop>:
}

void mainLoop(){
	while(1){
		buttonPress();
 672:	0e 94 bd 02 	call	0x57a	; 0x57a <buttonPress>
		
		if(sensorTurn == 0){
 676:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <sensorTurn>
 67a:	81 11       	cpse	r24, r1
 67c:	15 c0       	rjmp	.+42     	; 0x6a8 <mainLoop+0x36>
			setSensorTurn();
 67e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <setSensorTurn>
			reinitializeRegisters();
 682:	0e 94 c6 01 	call	0x38c	; 0x38c <reinitializeRegisters>
			
			shortPulse(triggerPin2);
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	0e 94 c6 02 	call	0x58c	; 0x58c <shortPulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68c:	29 e9       	ldi	r18, 0x99	; 153
 68e:	89 e5       	ldi	r24, 0x59	; 89
 690:	91 e0       	ldi	r25, 0x01	; 1
 692:	21 50       	subi	r18, 0x01	; 1
 694:	80 40       	sbci	r24, 0x00	; 0
 696:	90 40       	sbci	r25, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <mainLoop+0x20>
 69a:	00 00       	nop
			_delay_ms(60);
			
			calculateDistance(sensorTurn);
 69c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <sensorTurn>
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <calculateDistance>
 6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <mainLoop+0x66>
		}else{
			setSensorTurn();
 6a8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <setSensorTurn>
			setStartBuzzing();
 6ac:	0e 94 2d 02 	call	0x45a	; 0x45a <setStartBuzzing>
			reinitializeRegisters();
 6b0:	0e 94 c6 01 	call	0x38c	; 0x38c <reinitializeRegisters>
			reinitializeCounterValues();
 6b4:	0e 94 cb 01 	call	0x396	; 0x396 <reinitializeCounterValues>

			shortPulse(triggerPin1);
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	0e 94 c6 02 	call	0x58c	; 0x58c <shortPulse>
			risingEdge();
 6be:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <risingEdge>
			waitingForSignal();
 6c2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <waitingForSignal>
			fallingEdge();
 6c6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <fallingEdge>
			waitingForSignal();
 6ca:	0e 94 e6 02 	call	0x5cc	; 0x5cc <waitingForSignal>
			
			calculateDistance(sensorTurn);
 6ce:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <sensorTurn>
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <calculateDistance>
		}
		
		setDisplayRegisterValues();
 6d8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <setDisplayRegisterValues>
		
		//setOValues();
		printValues();
 6dc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <printValues>
 6e0:	2f ef       	ldi	r18, 0xFF	; 255
 6e2:	8f e3       	ldi	r24, 0x3F	; 63
 6e4:	9b e0       	ldi	r25, 0x0B	; 11
 6e6:	21 50       	subi	r18, 0x01	; 1
 6e8:	80 40       	sbci	r24, 0x00	; 0
 6ea:	90 40       	sbci	r25, 0x00	; 0
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <mainLoop+0x74>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <mainLoop+0x7e>
 6f0:	00 00       	nop
 6f2:	bf cf       	rjmp	.-130    	; 0x672 <mainLoop>

000006f4 <main>:
		_delay_ms(500);
	}
}

int main(void){	
	resetData();
 6f4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <resetData>
	initializeBuzzer();
 6f8:	0e 94 a6 01 	call	0x34c	; 0x34c <initializeBuzzer>
	initializeButtons();
 6fc:	0e 94 b6 01 	call	0x36c	; 0x36c <initializeButtons>
	initializeDisplay();
 700:	0e 94 ab 01 	call	0x356	; 0x356 <initializeDisplay>
	initializeTriggerPins();
 704:	0e 94 b2 01 	call	0x364	; 0x364 <initializeTriggerPins>
	initializeInterruptRegisters();
 708:	0e 94 bb 01 	call	0x376	; 0x376 <initializeInterruptRegisters>
	
	splashScreen();
 70c:	0e 94 06 02 	call	0x40c	; 0x40c <splashScreen>
	
	mainLoop();
 710:	0e 94 39 03 	call	0x672	; 0x672 <mainLoop>

00000714 <__divsf3>:
 714:	0e 94 9e 03 	call	0x73c	; 0x73c <__divsf3x>
 718:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__fp_round>
 71c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_pscB>
 720:	58 f0       	brcs	.+22     	; 0x738 <__divsf3+0x24>
 722:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_pscA>
 726:	40 f0       	brcs	.+16     	; 0x738 <__divsf3+0x24>
 728:	29 f4       	brne	.+10     	; 0x734 <__divsf3+0x20>
 72a:	5f 3f       	cpi	r21, 0xFF	; 255
 72c:	29 f0       	breq	.+10     	; 0x738 <__divsf3+0x24>
 72e:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_inf>
 732:	51 11       	cpse	r21, r1
 734:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_szero>
 738:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__fp_nan>

0000073c <__divsf3x>:
 73c:	0e 94 90 04 	call	0x920	; 0x920 <__fp_split3>
 740:	68 f3       	brcs	.-38     	; 0x71c <__divsf3+0x8>

00000742 <__divsf3_pse>:
 742:	99 23       	and	r25, r25
 744:	b1 f3       	breq	.-20     	; 0x732 <__divsf3+0x1e>
 746:	55 23       	and	r21, r21
 748:	91 f3       	breq	.-28     	; 0x72e <__divsf3+0x1a>
 74a:	95 1b       	sub	r25, r21
 74c:	55 0b       	sbc	r21, r21
 74e:	bb 27       	eor	r27, r27
 750:	aa 27       	eor	r26, r26
 752:	62 17       	cp	r22, r18
 754:	73 07       	cpc	r23, r19
 756:	84 07       	cpc	r24, r20
 758:	38 f0       	brcs	.+14     	; 0x768 <__divsf3_pse+0x26>
 75a:	9f 5f       	subi	r25, 0xFF	; 255
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	22 0f       	add	r18, r18
 760:	33 1f       	adc	r19, r19
 762:	44 1f       	adc	r20, r20
 764:	aa 1f       	adc	r26, r26
 766:	a9 f3       	breq	.-22     	; 0x752 <__divsf3_pse+0x10>
 768:	35 d0       	rcall	.+106    	; 0x7d4 <__divsf3_pse+0x92>
 76a:	0e 2e       	mov	r0, r30
 76c:	3a f0       	brmi	.+14     	; 0x77c <__divsf3_pse+0x3a>
 76e:	e0 e8       	ldi	r30, 0x80	; 128
 770:	32 d0       	rcall	.+100    	; 0x7d6 <__divsf3_pse+0x94>
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	e6 95       	lsr	r30
 778:	00 1c       	adc	r0, r0
 77a:	ca f7       	brpl	.-14     	; 0x76e <__divsf3_pse+0x2c>
 77c:	2b d0       	rcall	.+86     	; 0x7d4 <__divsf3_pse+0x92>
 77e:	fe 2f       	mov	r31, r30
 780:	29 d0       	rcall	.+82     	; 0x7d4 <__divsf3_pse+0x92>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	bb 1f       	adc	r27, r27
 78a:	26 17       	cp	r18, r22
 78c:	37 07       	cpc	r19, r23
 78e:	48 07       	cpc	r20, r24
 790:	ab 07       	cpc	r26, r27
 792:	b0 e8       	ldi	r27, 0x80	; 128
 794:	09 f0       	breq	.+2      	; 0x798 <__divsf3_pse+0x56>
 796:	bb 0b       	sbc	r27, r27
 798:	80 2d       	mov	r24, r0
 79a:	bf 01       	movw	r22, r30
 79c:	ff 27       	eor	r31, r31
 79e:	93 58       	subi	r25, 0x83	; 131
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	3a f0       	brmi	.+14     	; 0x7b2 <__divsf3_pse+0x70>
 7a4:	9e 3f       	cpi	r25, 0xFE	; 254
 7a6:	51 05       	cpc	r21, r1
 7a8:	78 f0       	brcs	.+30     	; 0x7c8 <__divsf3_pse+0x86>
 7aa:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_inf>
 7ae:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_szero>
 7b2:	5f 3f       	cpi	r21, 0xFF	; 255
 7b4:	e4 f3       	brlt	.-8      	; 0x7ae <__divsf3_pse+0x6c>
 7b6:	98 3e       	cpi	r25, 0xE8	; 232
 7b8:	d4 f3       	brlt	.-12     	; 0x7ae <__divsf3_pse+0x6c>
 7ba:	86 95       	lsr	r24
 7bc:	77 95       	ror	r23
 7be:	67 95       	ror	r22
 7c0:	b7 95       	ror	r27
 7c2:	f7 95       	ror	r31
 7c4:	9f 5f       	subi	r25, 0xFF	; 255
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__divsf3_pse+0x78>
 7c8:	88 0f       	add	r24, r24
 7ca:	91 1d       	adc	r25, r1
 7cc:	96 95       	lsr	r25
 7ce:	87 95       	ror	r24
 7d0:	97 f9       	bld	r25, 7
 7d2:	08 95       	ret
 7d4:	e1 e0       	ldi	r30, 0x01	; 1
 7d6:	66 0f       	add	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	bb 1f       	adc	r27, r27
 7de:	62 17       	cp	r22, r18
 7e0:	73 07       	cpc	r23, r19
 7e2:	84 07       	cpc	r24, r20
 7e4:	ba 07       	cpc	r27, r26
 7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__divsf3_pse+0xae>
 7e8:	62 1b       	sub	r22, r18
 7ea:	73 0b       	sbc	r23, r19
 7ec:	84 0b       	sbc	r24, r20
 7ee:	ba 0b       	sbc	r27, r26
 7f0:	ee 1f       	adc	r30, r30
 7f2:	88 f7       	brcc	.-30     	; 0x7d6 <__divsf3_pse+0x94>
 7f4:	e0 95       	com	r30
 7f6:	08 95       	ret

000007f8 <__fixunssfsi>:
 7f8:	0e 94 98 04 	call	0x930	; 0x930 <__fp_splitA>
 7fc:	88 f0       	brcs	.+34     	; 0x820 <__fixunssfsi+0x28>
 7fe:	9f 57       	subi	r25, 0x7F	; 127
 800:	98 f0       	brcs	.+38     	; 0x828 <__fixunssfsi+0x30>
 802:	b9 2f       	mov	r27, r25
 804:	99 27       	eor	r25, r25
 806:	b7 51       	subi	r27, 0x17	; 23
 808:	b0 f0       	brcs	.+44     	; 0x836 <__fixunssfsi+0x3e>
 80a:	e1 f0       	breq	.+56     	; 0x844 <__fixunssfsi+0x4c>
 80c:	66 0f       	add	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	1a f0       	brmi	.+6      	; 0x81c <__fixunssfsi+0x24>
 816:	ba 95       	dec	r27
 818:	c9 f7       	brne	.-14     	; 0x80c <__fixunssfsi+0x14>
 81a:	14 c0       	rjmp	.+40     	; 0x844 <__fixunssfsi+0x4c>
 81c:	b1 30       	cpi	r27, 0x01	; 1
 81e:	91 f0       	breq	.+36     	; 0x844 <__fixunssfsi+0x4c>
 820:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_zero>
 824:	b1 e0       	ldi	r27, 0x01	; 1
 826:	08 95       	ret
 828:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_zero>
 82c:	67 2f       	mov	r22, r23
 82e:	78 2f       	mov	r23, r24
 830:	88 27       	eor	r24, r24
 832:	b8 5f       	subi	r27, 0xF8	; 248
 834:	39 f0       	breq	.+14     	; 0x844 <__fixunssfsi+0x4c>
 836:	b9 3f       	cpi	r27, 0xF9	; 249
 838:	cc f3       	brlt	.-14     	; 0x82c <__fixunssfsi+0x34>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b3 95       	inc	r27
 842:	d9 f7       	brne	.-10     	; 0x83a <__fixunssfsi+0x42>
 844:	3e f4       	brtc	.+14     	; 0x854 <__fixunssfsi+0x5c>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__floatunsisf>:
 856:	e8 94       	clt
 858:	09 c0       	rjmp	.+18     	; 0x86c <__floatsisf+0x12>

0000085a <__floatsisf>:
 85a:	97 fb       	bst	r25, 7
 85c:	3e f4       	brtc	.+14     	; 0x86c <__floatsisf+0x12>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	99 23       	and	r25, r25
 86e:	a9 f0       	breq	.+42     	; 0x89a <__floatsisf+0x40>
 870:	f9 2f       	mov	r31, r25
 872:	96 e9       	ldi	r25, 0x96	; 150
 874:	bb 27       	eor	r27, r27
 876:	93 95       	inc	r25
 878:	f6 95       	lsr	r31
 87a:	87 95       	ror	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f1 11       	cpse	r31, r1
 884:	f8 cf       	rjmp	.-16     	; 0x876 <__floatsisf+0x1c>
 886:	fa f4       	brpl	.+62     	; 0x8c6 <__floatsisf+0x6c>
 888:	bb 0f       	add	r27, r27
 88a:	11 f4       	brne	.+4      	; 0x890 <__floatsisf+0x36>
 88c:	60 ff       	sbrs	r22, 0
 88e:	1b c0       	rjmp	.+54     	; 0x8c6 <__floatsisf+0x6c>
 890:	6f 5f       	subi	r22, 0xFF	; 255
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <__floatsisf+0x6c>
 89a:	88 23       	and	r24, r24
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__floatsisf+0x48>
 89e:	96 e9       	ldi	r25, 0x96	; 150
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <__floatsisf+0x6a>
 8a2:	77 23       	and	r23, r23
 8a4:	21 f0       	breq	.+8      	; 0x8ae <__floatsisf+0x54>
 8a6:	9e e8       	ldi	r25, 0x8E	; 142
 8a8:	87 2f       	mov	r24, r23
 8aa:	76 2f       	mov	r23, r22
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__floatsisf+0x5e>
 8ae:	66 23       	and	r22, r22
 8b0:	71 f0       	breq	.+28     	; 0x8ce <__floatsisf+0x74>
 8b2:	96 e8       	ldi	r25, 0x86	; 134
 8b4:	86 2f       	mov	r24, r22
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	2a f0       	brmi	.+10     	; 0x8c6 <__floatsisf+0x6c>
 8bc:	9a 95       	dec	r25
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	da f7       	brpl	.-10     	; 0x8bc <__floatsisf+0x62>
 8c6:	88 0f       	add	r24, r24
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__fp_inf>:
 8d0:	97 f9       	bld	r25, 7
 8d2:	9f 67       	ori	r25, 0x7F	; 127
 8d4:	80 e8       	ldi	r24, 0x80	; 128
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	08 95       	ret

000008dc <__fp_nan>:
 8dc:	9f ef       	ldi	r25, 0xFF	; 255
 8de:	80 ec       	ldi	r24, 0xC0	; 192
 8e0:	08 95       	ret

000008e2 <__fp_pscA>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	16 16       	cp	r1, r22
 8e8:	17 06       	cpc	r1, r23
 8ea:	18 06       	cpc	r1, r24
 8ec:	09 06       	cpc	r0, r25
 8ee:	08 95       	ret

000008f0 <__fp_pscB>:
 8f0:	00 24       	eor	r0, r0
 8f2:	0a 94       	dec	r0
 8f4:	12 16       	cp	r1, r18
 8f6:	13 06       	cpc	r1, r19
 8f8:	14 06       	cpc	r1, r20
 8fa:	05 06       	cpc	r0, r21
 8fc:	08 95       	ret

000008fe <__fp_round>:
 8fe:	09 2e       	mov	r0, r25
 900:	03 94       	inc	r0
 902:	00 0c       	add	r0, r0
 904:	11 f4       	brne	.+4      	; 0x90a <__fp_round+0xc>
 906:	88 23       	and	r24, r24
 908:	52 f0       	brmi	.+20     	; 0x91e <__fp_round+0x20>
 90a:	bb 0f       	add	r27, r27
 90c:	40 f4       	brcc	.+16     	; 0x91e <__fp_round+0x20>
 90e:	bf 2b       	or	r27, r31
 910:	11 f4       	brne	.+4      	; 0x916 <__fp_round+0x18>
 912:	60 ff       	sbrs	r22, 0
 914:	04 c0       	rjmp	.+8      	; 0x91e <__fp_round+0x20>
 916:	6f 5f       	subi	r22, 0xFF	; 255
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__fp_split3>:
 920:	57 fd       	sbrc	r21, 7
 922:	90 58       	subi	r25, 0x80	; 128
 924:	44 0f       	add	r20, r20
 926:	55 1f       	adc	r21, r21
 928:	59 f0       	breq	.+22     	; 0x940 <__fp_splitA+0x10>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	71 f0       	breq	.+28     	; 0x94a <__fp_splitA+0x1a>
 92e:	47 95       	ror	r20

00000930 <__fp_splitA>:
 930:	88 0f       	add	r24, r24
 932:	97 fb       	bst	r25, 7
 934:	99 1f       	adc	r25, r25
 936:	61 f0       	breq	.+24     	; 0x950 <__fp_splitA+0x20>
 938:	9f 3f       	cpi	r25, 0xFF	; 255
 93a:	79 f0       	breq	.+30     	; 0x95a <__fp_splitA+0x2a>
 93c:	87 95       	ror	r24
 93e:	08 95       	ret
 940:	12 16       	cp	r1, r18
 942:	13 06       	cpc	r1, r19
 944:	14 06       	cpc	r1, r20
 946:	55 1f       	adc	r21, r21
 948:	f2 cf       	rjmp	.-28     	; 0x92e <__fp_split3+0xe>
 94a:	46 95       	lsr	r20
 94c:	f1 df       	rcall	.-30     	; 0x930 <__fp_splitA>
 94e:	08 c0       	rjmp	.+16     	; 0x960 <__fp_splitA+0x30>
 950:	16 16       	cp	r1, r22
 952:	17 06       	cpc	r1, r23
 954:	18 06       	cpc	r1, r24
 956:	99 1f       	adc	r25, r25
 958:	f1 cf       	rjmp	.-30     	; 0x93c <__fp_splitA+0xc>
 95a:	86 95       	lsr	r24
 95c:	71 05       	cpc	r23, r1
 95e:	61 05       	cpc	r22, r1
 960:	08 94       	sec
 962:	08 95       	ret

00000964 <__fp_zero>:
 964:	e8 94       	clt

00000966 <__fp_szero>:
 966:	bb 27       	eor	r27, r27
 968:	66 27       	eor	r22, r22
 96a:	77 27       	eor	r23, r23
 96c:	cb 01       	movw	r24, r22
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__muluhisi3>:
 972:	0e 94 c4 04 	call	0x988	; 0x988 <__umulhisi3>
 976:	a5 9f       	mul	r26, r21
 978:	90 0d       	add	r25, r0
 97a:	b4 9f       	mul	r27, r20
 97c:	90 0d       	add	r25, r0
 97e:	a4 9f       	mul	r26, r20
 980:	80 0d       	add	r24, r0
 982:	91 1d       	adc	r25, r1
 984:	11 24       	eor	r1, r1
 986:	08 95       	ret

00000988 <__umulhisi3>:
 988:	a2 9f       	mul	r26, r18
 98a:	b0 01       	movw	r22, r0
 98c:	b3 9f       	mul	r27, r19
 98e:	c0 01       	movw	r24, r0
 990:	a3 9f       	mul	r26, r19
 992:	70 0d       	add	r23, r0
 994:	81 1d       	adc	r24, r1
 996:	11 24       	eor	r1, r1
 998:	91 1d       	adc	r25, r1
 99a:	b2 9f       	mul	r27, r18
 99c:	70 0d       	add	r23, r0
 99e:	81 1d       	adc	r24, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	08 95       	ret

000009a6 <__itoa_ncheck>:
 9a6:	bb 27       	eor	r27, r27
 9a8:	4a 30       	cpi	r20, 0x0A	; 10
 9aa:	31 f4       	brne	.+12     	; 0x9b8 <__itoa_ncheck+0x12>
 9ac:	99 23       	and	r25, r25
 9ae:	22 f4       	brpl	.+8      	; 0x9b8 <__itoa_ncheck+0x12>
 9b0:	bd e2       	ldi	r27, 0x2D	; 45
 9b2:	90 95       	com	r25
 9b4:	81 95       	neg	r24
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	0c 94 df 04 	jmp	0x9be	; 0x9be <__utoa_common>

000009bc <__utoa_ncheck>:
 9bc:	bb 27       	eor	r27, r27

000009be <__utoa_common>:
 9be:	fb 01       	movw	r30, r22
 9c0:	55 27       	eor	r21, r21
 9c2:	aa 27       	eor	r26, r26
 9c4:	88 0f       	add	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	aa 1f       	adc	r26, r26
 9ca:	a4 17       	cp	r26, r20
 9cc:	10 f0       	brcs	.+4      	; 0x9d2 <__utoa_common+0x14>
 9ce:	a4 1b       	sub	r26, r20
 9d0:	83 95       	inc	r24
 9d2:	50 51       	subi	r21, 0x10	; 16
 9d4:	b9 f7       	brne	.-18     	; 0x9c4 <__utoa_common+0x6>
 9d6:	a0 5d       	subi	r26, 0xD0	; 208
 9d8:	aa 33       	cpi	r26, 0x3A	; 58
 9da:	08 f0       	brcs	.+2      	; 0x9de <__utoa_common+0x20>
 9dc:	a9 5d       	subi	r26, 0xD9	; 217
 9de:	a1 93       	st	Z+, r26
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	79 f7       	brne	.-34     	; 0x9c2 <__utoa_common+0x4>
 9e4:	b1 11       	cpse	r27, r1
 9e6:	b1 93       	st	Z+, r27
 9e8:	11 92       	st	Z+, r1
 9ea:	cb 01       	movw	r24, r22
 9ec:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <strrev>

000009f0 <strrev>:
 9f0:	dc 01       	movw	r26, r24
 9f2:	fc 01       	movw	r30, r24
 9f4:	67 2f       	mov	r22, r23
 9f6:	71 91       	ld	r23, Z+
 9f8:	77 23       	and	r23, r23
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <strrev+0x4>
 9fc:	32 97       	sbiw	r30, 0x02	; 2
 9fe:	04 c0       	rjmp	.+8      	; 0xa08 <strrev+0x18>
 a00:	7c 91       	ld	r23, X
 a02:	6d 93       	st	X+, r22
 a04:	70 83       	st	Z, r23
 a06:	62 91       	ld	r22, -Z
 a08:	ae 17       	cp	r26, r30
 a0a:	bf 07       	cpc	r27, r31
 a0c:	c8 f3       	brcs	.-14     	; 0xa00 <strrev+0x10>
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>

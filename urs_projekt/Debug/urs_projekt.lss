
urs_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  00800062  000007b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fd0  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000912  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b1  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000519  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000859  00000000  00000000  0000305d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  8a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	c7 9a       	sbi	0x18, 7	; 24
  94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
  96:	c7 98       	cbi	0x18, 7	; 24
  98:	08 95       	ret

0000009a <lcd_write>:
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
  a0:	66 23       	and	r22, r22
  a2:	11 f0       	breq	.+4      	; 0xa8 <lcd_write+0xe>
  a4:	c5 9a       	sbi	0x18, 5	; 24
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_write+0x10>
  a8:	c5 98       	cbi	0x18, 5	; 24
  aa:	c6 98       	cbi	0x18, 6	; 24
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	8f 60       	ori	r24, 0x0F	; 15
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	c8 b3       	in	r28, 0x18	; 24
  b4:	c0 7f       	andi	r28, 0xF0	; 240
  b6:	8d 2f       	mov	r24, r29
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	8c 2b       	or	r24, r28
  be:	88 bb       	out	0x18, r24	; 24
  c0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  c4:	df 70       	andi	r29, 0x0F	; 15
  c6:	dc 2b       	or	r29, r28
  c8:	d8 bb       	out	0x18, r29	; 24
  ca:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  ce:	cf 60       	ori	r28, 0x0F	; 15
  d0:	c8 bb       	out	0x18, r28	; 24
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_read>:
  d8:	88 23       	and	r24, r24
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_read+0x8>
  dc:	c5 9a       	sbi	0x18, 5	; 24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_read+0xa>
  e0:	c5 98       	cbi	0x18, 5	; 24
  e2:	c6 9a       	sbi	0x18, 6	; 24
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	c7 9a       	sbi	0x18, 7	; 24
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_read+0x16>
  ee:	96 b3       	in	r25, 0x16	; 22
  f0:	c7 98       	cbi	0x18, 7	; 24
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x1c>
  f4:	c7 9a       	sbi	0x18, 7	; 24
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_read+0x20>
  f8:	26 b3       	in	r18, 0x16	; 22
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	89 2f       	mov	r24, r25
  fe:	82 95       	swap	r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	c7 98       	cbi	0x18, 7	; 24
 104:	82 2b       	or	r24, r18
 106:	08 95       	ret

00000108 <lcd_waitbusy>:
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 10e:	88 23       	and	r24, r24
 110:	dc f3       	brlt	.-10     	; 0x108 <lcd_waitbusy>
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_waitbusy+0xe>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_read>
 120:	08 95       	ret

00000122 <lcd_command>:
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	8c 2f       	mov	r24, r28
 12e:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <lcd_gotoxy>:
 136:	61 11       	cpse	r22, r1
 138:	04 c0       	rjmp	.+8      	; 0x142 <lcd_gotoxy+0xc>
 13a:	80 58       	subi	r24, 0x80	; 128
 13c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 140:	08 95       	ret
 142:	80 54       	subi	r24, 0x40	; 64
 144:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_clrscr>:
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 150:	08 95       	ret

00000152 <lcd_putc>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	0e 94 84 00 	call	0x108	; 0x108 <lcd_waitbusy>
 15a:	ca 30       	cpi	r28, 0x0A	; 10
 15c:	49 f4       	brne	.+18     	; 0x170 <lcd_putc+0x1e>
 15e:	80 34       	cpi	r24, 0x40	; 64
 160:	10 f0       	brcs	.+4      	; 0x166 <lcd_putc+0x14>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	01 c0       	rjmp	.+2      	; 0x168 <lcd_putc+0x16>
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
 16e:	04 c0       	rjmp	.+8      	; 0x178 <lcd_putc+0x26>
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <lcd_puts>:
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	29 f0       	breq	.+10     	; 0x196 <lcd_puts+0x1a>
 18c:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_putc>
 190:	89 91       	ld	r24, Y+
 192:	81 11       	cpse	r24, r1
 194:	fb cf       	rjmp	.-10     	; 0x18c <lcd_puts+0x10>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	8f 60       	ori	r24, 0x0F	; 15
 1a8:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1aa:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ac:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ae:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	93 e7       	ldi	r25, 0x73	; 115
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x18>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1b8:	c1 9a       	sbi	0x18, 1	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ba:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_toggle();
 1bc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	80 ef       	ldi	r24, 0xF0	; 240
 1c2:	93 e2       	ldi	r25, 0x23	; 35
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x28>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1c8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	c5 e7       	ldi	r28, 0x75	; 117
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x36>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1da:	ce 01       	movw	r24, r28
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x40>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1e0:	c0 98       	cbi	0x18, 0	; 24
    lcd_e_toggle();
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e6:	21 97       	sbiw	r28, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1f6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 200:	81 2f       	mov	r24, r17
 202:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>

}/* lcd_init */
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	08 95       	ret

0000020e <__vector_8>:
uint8_t interrupt0Turn = 0;
uint8_t sensorTurn = 0;
uint8_t buzzingDistance = 16;

// timer 2 routine
ISR(TIMER1_OVF_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
	timerOverflow++;					
 220:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <timerOverflow>
 224:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <timerOverflow+0x1>
 228:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <timerOverflow+0x2>
 22c:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <timerOverflow+0x3>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	a1 1d       	adc	r26, r1
 234:	b1 1d       	adc	r27, r1
 236:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <timerOverflow>
 23a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <timerOverflow+0x1>
 23e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <timerOverflow+0x2>
 242:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <timerOverflow+0x3>
}
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_1>:

// timer 0 routine
ISR(INT0_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
	if(interrupt0Turn == 0){
 26a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <interrupt0Turn>
 26e:	81 11       	cpse	r24, r1
 270:	07 c0       	rjmp	.+14     	; 0x280 <__vector_1+0x28>
		TCCR1B |= 1 << CS10;
 272:	8e b5       	in	r24, 0x2e	; 46
 274:	81 60       	ori	r24, 0x01	; 1
 276:	8e bd       	out	0x2e, r24	; 46
		interrupt0Turn = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <interrupt0Turn>
 27e:	11 c0       	rjmp	.+34     	; 0x2a2 <__vector_1+0x4a>
	}else{
		TCCR1B = 0;
 280:	1e bc       	out	0x2e, r1	; 46
		count2 = TCNT1;
 282:	8c b5       	in	r24, 0x2c	; 44
 284:	9d b5       	in	r25, 0x2d	; 45
 286:	a0 e0       	ldi	r26, 0x00	; 0
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count2>
 28e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count2+0x1>
 292:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <count2+0x2>
 296:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <count2+0x3>
		TCNT1 = 0;
 29a:	1d bc       	out	0x2d, r1	; 45
 29c:	1c bc       	out	0x2c, r1	; 44
		interrupt0Turn = 0;
 29e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <interrupt0Turn>
	}
}
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <main>:

int main(void){
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	a0 97       	sbiw	r28, 0x20	; 32
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
	uint16_t distance2 = 0;
	char string1[16];
	char string2[16];
	
	// buzzer initialization
	DDRC = 0xff;
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
 2cc:	85 bb       	out	0x15, r24	; 21

	// display initialization
	DDRD = _BV(4);
 2ce:	90 e1       	ldi	r25, 0x10	; 16
 2d0:	91 bb       	out	0x11, r25	; 17
	PORTD = 0xFF;
 2d2:	82 bb       	out	0x12, r24	; 18
	lcd_init(LCD_DISP_ON);
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>

	// trigger pins setup
	DDRA = _BV(0) | _BV(1); 
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;															
 2de:	1b ba       	out	0x1b, r1	; 27
			
	// interrupt registers initialization			
	TIMSK = (1 << TOIE1);						
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;								
 2e4:	1f bc       	out	0x2f, r1	; 47
	GICR |= 1 << INT0;
 2e6:	8b b7       	in	r24, 0x3b	; 59
 2e8:	80 64       	ori	r24, 0x40	; 64
 2ea:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1 << ISC00;
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	85 bf       	out	0x35, r24	; 53
	sei();
 2f2:	78 94       	sei

int main(void){
	// declaring variables
	uint32_t count1 = 0;
	uint16_t distance1 = 0;
	uint16_t distance2 = 0;
 2f4:	e1 2c       	mov	r14, r1
 2f6:	f1 2c       	mov	r15, r1
}

int main(void){
	// declaring variables
	uint32_t count1 = 0;
	uint16_t distance1 = 0;
 2f8:	c1 2c       	mov	r12, r1
 2fa:	d1 2c       	mov	r13, r1

	// main loop
	while(1){
		if(sensorTurn == 0){
			// setting up next sensor reading
			sensorTurn = 1;
 2fc:	11 e0       	ldi	r17, 0x01	; 1
			PORTA |= (1 << Trigger_pin1);
			_delay_us(10);
			PORTA &= (~(1 << Trigger_pin1));

			TCNT1 = 0;									// NE ZNAM OBJASNIT ODOVUDA
			TCCR1B = 0x41;								// UKLJUCUJUCI INTERRUPTE
 2fe:	0f 2e       	mov	r0, r31
 300:	f1 e4       	ldi	r31, 0x41	; 65
 302:	2f 2e       	mov	r2, r31
 304:	f0 2d       	mov	r31, r0
			TIFR = 1 << ICF1;
 306:	68 94       	set
 308:	88 24       	eor	r8, r8
 30a:	85 f8       	bld	r8, 5
			TIFR = 1 << TOV1;
 30c:	68 94       	set
 30e:	99 24       	eor	r9, r9
 310:	92 f8       	bld	r9, 2
			while ((TIFR & (1 << ICF1)) == 0);
			count1 = ICR1 + (65535 * timerOverflow);
			distance1 = (uint32_t)count1 / 431.85;		// DO OVUDA
			
			// display register values
			TCCR1A = _BV(COM1B1) | _BV(WGM10);
 312:	0f 2e       	mov	r0, r31
 314:	f1 e2       	ldi	r31, 0x21	; 33
 316:	3f 2e       	mov	r3, r31
 318:	f0 2d       	mov	r31, r0
			TCCR1B = _BV(WGM12) | _BV(CS11);
 31a:	0a e0       	ldi	r16, 0x0A	; 10
			OCR1B = 64;
 31c:	68 94       	set
 31e:	aa 24       	eor	r10, r10
 320:	a6 f8       	bld	r10, 6
 322:	b1 2c       	mov	r11, r1
	MCUCR |= 1 << ISC00;
	sei();

	// main loop
	while(1){
		if(sensorTurn == 0){
 324:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 328:	81 11       	cpse	r24, r1
 32a:	60 c0       	rjmp	.+192    	; 0x3ec <main+0x138>
			// setting up next sensor reading
			sensorTurn = 1;
 32c:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <__data_end>
			
			// variables and registers reinitialization
			TCCR1A = 0;
 330:	1f bc       	out	0x2f, r1	; 47
			count1 = 0;
			distance1 = 0;

			// short pulse used for starting the ranging
			PORTA |= (1 << Trigger_pin1);
 332:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	28 e1       	ldi	r18, 0x18	; 24
 336:	2a 95       	dec	r18
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x82>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x88>
			_delay_us(10);
			PORTA &= (~(1 << Trigger_pin1));
 33c:	d8 98       	cbi	0x1b, 0	; 27

			TCNT1 = 0;									// NE ZNAM OBJASNIT ODOVUDA
 33e:	1d bc       	out	0x2d, r1	; 45
 340:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x41;								// UKLJUCUJUCI INTERRUPTE
 342:	2e bc       	out	0x2e, r2	; 46
			TIFR = 1 << ICF1;
 344:	88 be       	out	0x38, r8	; 56
			TIFR = 1 << TOV1;
 346:	98 be       	out	0x38, r9	; 56

			while ((TIFR & (1 << ICF1)) == 0);
 348:	08 b6       	in	r0, 0x38	; 56
 34a:	05 fe       	sbrs	r0, 5
 34c:	fd cf       	rjmp	.-6      	; 0x348 <main+0x94>
			TCNT1 = 0;
 34e:	1d bc       	out	0x2d, r1	; 45
 350:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x01;
 352:	1e bd       	out	0x2e, r17	; 46
			TIFR = 1 << ICF1;
 354:	88 be       	out	0x38, r8	; 56
			TIFR = 1 << TOV1;
 356:	98 be       	out	0x38, r9	; 56
			timerOverflow = 0;
 358:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <timerOverflow>
 35c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <timerOverflow+0x1>
 360:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <timerOverflow+0x2>
 364:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timerOverflow+0x3>

			while ((TIFR & (1 << ICF1)) == 0);
 368:	08 b6       	in	r0, 0x38	; 56
 36a:	05 fe       	sbrs	r0, 5
 36c:	fd cf       	rjmp	.-6      	; 0x368 <main+0xb4>
			count1 = ICR1 + (65535 * timerOverflow);
 36e:	66 b5       	in	r22, 0x26	; 38
 370:	77 b5       	in	r23, 0x27	; 39
			distance1 = (uint32_t)count1 / 431.85;		// DO OVUDA
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 cb 02 	call	0x596	; 0x596 <__floatunsisf>
 37a:	2d ec       	ldi	r18, 0xCD	; 205
 37c:	3c ee       	ldi	r19, 0xEC	; 236
 37e:	47 ed       	ldi	r20, 0xD7	; 215
 380:	53 e4       	ldi	r21, 0x43	; 67
 382:	0e 94 2a 02 	call	0x454	; 0x454 <__divsf3>
 386:	0e 94 9c 02 	call	0x538	; 0x538 <__fixunssfsi>
 38a:	2b 01       	movw	r4, r22
 38c:	3c 01       	movw	r6, r24
 38e:	6b 01       	movw	r12, r22
			
			// display register values
			TCCR1A = _BV(COM1B1) | _BV(WGM10);
 390:	3f bc       	out	0x2f, r3	; 47
			TCCR1B = _BV(WGM12) | _BV(CS11);
 392:	0e bd       	out	0x2e, r16	; 46
			OCR1B = 64;
 394:	b9 bc       	out	0x29, r11	; 41
 396:	a8 bc       	out	0x28, r10	; 40

			// printing values to display
			lcd_clrscr();
 398:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 39c:	40 2f       	mov	r20, r16
 39e:	be 01       	movw	r22, r28
 3a0:	6f 5f       	subi	r22, 0xFF	; 255
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255
 3a4:	c2 01       	movw	r24, r4
 3a6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__itoa_ncheck>
 3aa:	40 2f       	mov	r20, r16
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 5e       	subi	r22, 0xEF	; 239
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	c7 01       	movw	r24, r14
 3b4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__itoa_ncheck>
			itoa(distance1,string1,10);
			itoa(distance2,string2,10);
			lcd_gotoxy(0, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_gotoxy>
			lcd_puts(string1);
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
			lcd_gotoxy(0, 1);
 3c8:	61 2f       	mov	r22, r17
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_gotoxy>
			lcd_puts(string2);
 3d0:	ce 01       	movw	r24, r28
 3d2:	41 96       	adiw	r24, 0x11	; 17
 3d4:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f e3       	ldi	r25, 0x3F	; 63
 3dc:	2b e0       	ldi	r18, 0x0B	; 11
 3de:	81 50       	subi	r24, 0x01	; 1
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	20 40       	sbci	r18, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x12a>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x134>
 3e8:	00 00       	nop
 3ea:	27 c0       	rjmp	.+78     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			_delay_ms(500);
		}else{
			// setting up next sensor reading
			sensorTurn = 0;
 3ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			
			// registers reinitialization
			TCCR1A = 0;
 3f0:	1f bc       	out	0x2f, r1	; 47
			TCCR1B = 0;
 3f2:	1e bc       	out	0x2e, r1	; 46
			TCNT1 = 0;
 3f4:	1d bc       	out	0x2d, r1	; 45
 3f6:	1c bc       	out	0x2c, r1	; 44
			
			// short pulse used for starting the ranging
			PORTA |= (1 << Trigger_pin2);
 3f8:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	88 e1       	ldi	r24, 0x18	; 24
 3fc:	8a 95       	dec	r24
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x148>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			_delay_us(10);
			PORTA &= (~(1 << Trigger_pin2));
 402:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	99 e9       	ldi	r25, 0x99	; 153
 406:	29 e5       	ldi	r18, 0x59	; 89
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	91 50       	subi	r25, 0x01	; 1
 40c:	20 40       	sbci	r18, 0x00	; 0
 40e:	80 40       	sbci	r24, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 00       	nop
			
			// securing 60 ms pause in order to prevent noise
			_delay_ms(60);
			
			// calculating the distance
			distance2 = count2 / 431.85;
 414:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <count2>
 418:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <count2+0x1>
 41c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <count2+0x2>
 420:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <count2+0x3>
 424:	0e 94 cb 02 	call	0x596	; 0x596 <__floatunsisf>
 428:	2d ec       	ldi	r18, 0xCD	; 205
 42a:	3c ee       	ldi	r19, 0xEC	; 236
 42c:	47 ed       	ldi	r20, 0xD7	; 215
 42e:	53 e4       	ldi	r21, 0x43	; 67
 430:	0e 94 2a 02 	call	0x454	; 0x454 <__divsf3>
 434:	0e 94 9c 02 	call	0x538	; 0x538 <__fixunssfsi>
 438:	7b 01       	movw	r14, r22
		}
		
		// buzzing the buzzer
		if(distance1 >= buzzingDistance && distance2 >= buzzingDistance){
 43a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	c8 16       	cp	r12, r24
 442:	d9 06       	cpc	r13, r25
 444:	28 f0       	brcs	.+10     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 446:	e8 16       	cp	r14, r24
 448:	f9 06       	cpc	r15, r25
 44a:	10 f0       	brcs	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			PORTC = 0x01;
 44c:	15 bb       	out	0x15, r17	; 21
 44e:	6a cf       	rjmp	.-300    	; 0x324 <main+0x70>
		}else{
			PORTC = 0x00;
 450:	15 ba       	out	0x15, r1	; 21
 452:	68 cf       	rjmp	.-304    	; 0x324 <main+0x70>

00000454 <__divsf3>:
 454:	0e 94 3e 02 	call	0x47c	; 0x47c <__divsf3x>
 458:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_round>
 45c:	0e 94 18 03 	call	0x630	; 0x630 <__fp_pscB>
 460:	58 f0       	brcs	.+22     	; 0x478 <__stack+0x19>
 462:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscA>
 466:	40 f0       	brcs	.+16     	; 0x478 <__stack+0x19>
 468:	29 f4       	brne	.+10     	; 0x474 <__stack+0x15>
 46a:	5f 3f       	cpi	r21, 0xFF	; 255
 46c:	29 f0       	breq	.+10     	; 0x478 <__stack+0x19>
 46e:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_inf>
 472:	51 11       	cpse	r21, r1
 474:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>
 478:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_nan>

0000047c <__divsf3x>:
 47c:	0e 94 30 03 	call	0x660	; 0x660 <__fp_split3>
 480:	68 f3       	brcs	.-38     	; 0x45c <__divsf3+0x8>

00000482 <__divsf3_pse>:
 482:	99 23       	and	r25, r25
 484:	b1 f3       	breq	.-20     	; 0x472 <__stack+0x13>
 486:	55 23       	and	r21, r21
 488:	91 f3       	breq	.-28     	; 0x46e <__stack+0xf>
 48a:	95 1b       	sub	r25, r21
 48c:	55 0b       	sbc	r21, r21
 48e:	bb 27       	eor	r27, r27
 490:	aa 27       	eor	r26, r26
 492:	62 17       	cp	r22, r18
 494:	73 07       	cpc	r23, r19
 496:	84 07       	cpc	r24, r20
 498:	38 f0       	brcs	.+14     	; 0x4a8 <__divsf3_pse+0x26>
 49a:	9f 5f       	subi	r25, 0xFF	; 255
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	44 1f       	adc	r20, r20
 4a4:	aa 1f       	adc	r26, r26
 4a6:	a9 f3       	breq	.-22     	; 0x492 <__divsf3_pse+0x10>
 4a8:	35 d0       	rcall	.+106    	; 0x514 <__divsf3_pse+0x92>
 4aa:	0e 2e       	mov	r0, r30
 4ac:	3a f0       	brmi	.+14     	; 0x4bc <__divsf3_pse+0x3a>
 4ae:	e0 e8       	ldi	r30, 0x80	; 128
 4b0:	32 d0       	rcall	.+100    	; 0x516 <__divsf3_pse+0x94>
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	e6 95       	lsr	r30
 4b8:	00 1c       	adc	r0, r0
 4ba:	ca f7       	brpl	.-14     	; 0x4ae <__divsf3_pse+0x2c>
 4bc:	2b d0       	rcall	.+86     	; 0x514 <__divsf3_pse+0x92>
 4be:	fe 2f       	mov	r31, r30
 4c0:	29 d0       	rcall	.+82     	; 0x514 <__divsf3_pse+0x92>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	bb 1f       	adc	r27, r27
 4ca:	26 17       	cp	r18, r22
 4cc:	37 07       	cpc	r19, r23
 4ce:	48 07       	cpc	r20, r24
 4d0:	ab 07       	cpc	r26, r27
 4d2:	b0 e8       	ldi	r27, 0x80	; 128
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__divsf3_pse+0x56>
 4d6:	bb 0b       	sbc	r27, r27
 4d8:	80 2d       	mov	r24, r0
 4da:	bf 01       	movw	r22, r30
 4dc:	ff 27       	eor	r31, r31
 4de:	93 58       	subi	r25, 0x83	; 131
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	3a f0       	brmi	.+14     	; 0x4f2 <__divsf3_pse+0x70>
 4e4:	9e 3f       	cpi	r25, 0xFE	; 254
 4e6:	51 05       	cpc	r21, r1
 4e8:	78 f0       	brcs	.+30     	; 0x508 <__divsf3_pse+0x86>
 4ea:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_inf>
 4ee:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_szero>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	e4 f3       	brlt	.-8      	; 0x4ee <__divsf3_pse+0x6c>
 4f6:	98 3e       	cpi	r25, 0xE8	; 232
 4f8:	d4 f3       	brlt	.-12     	; 0x4ee <__divsf3_pse+0x6c>
 4fa:	86 95       	lsr	r24
 4fc:	77 95       	ror	r23
 4fe:	67 95       	ror	r22
 500:	b7 95       	ror	r27
 502:	f7 95       	ror	r31
 504:	9f 5f       	subi	r25, 0xFF	; 255
 506:	c9 f7       	brne	.-14     	; 0x4fa <__divsf3_pse+0x78>
 508:	88 0f       	add	r24, r24
 50a:	91 1d       	adc	r25, r1
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	97 f9       	bld	r25, 7
 512:	08 95       	ret
 514:	e1 e0       	ldi	r30, 0x01	; 1
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	bb 1f       	adc	r27, r27
 51e:	62 17       	cp	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	ba 07       	cpc	r27, r26
 526:	20 f0       	brcs	.+8      	; 0x530 <__divsf3_pse+0xae>
 528:	62 1b       	sub	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	84 0b       	sbc	r24, r20
 52e:	ba 0b       	sbc	r27, r26
 530:	ee 1f       	adc	r30, r30
 532:	88 f7       	brcc	.-30     	; 0x516 <__divsf3_pse+0x94>
 534:	e0 95       	com	r30
 536:	08 95       	ret

00000538 <__fixunssfsi>:
 538:	0e 94 38 03 	call	0x670	; 0x670 <__fp_splitA>
 53c:	88 f0       	brcs	.+34     	; 0x560 <__fixunssfsi+0x28>
 53e:	9f 57       	subi	r25, 0x7F	; 127
 540:	98 f0       	brcs	.+38     	; 0x568 <__fixunssfsi+0x30>
 542:	b9 2f       	mov	r27, r25
 544:	99 27       	eor	r25, r25
 546:	b7 51       	subi	r27, 0x17	; 23
 548:	b0 f0       	brcs	.+44     	; 0x576 <__fixunssfsi+0x3e>
 54a:	e1 f0       	breq	.+56     	; 0x584 <__fixunssfsi+0x4c>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a f0       	brmi	.+6      	; 0x55c <__fixunssfsi+0x24>
 556:	ba 95       	dec	r27
 558:	c9 f7       	brne	.-14     	; 0x54c <__fixunssfsi+0x14>
 55a:	14 c0       	rjmp	.+40     	; 0x584 <__fixunssfsi+0x4c>
 55c:	b1 30       	cpi	r27, 0x01	; 1
 55e:	91 f0       	breq	.+36     	; 0x584 <__fixunssfsi+0x4c>
 560:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__fp_zero>
 564:	b1 e0       	ldi	r27, 0x01	; 1
 566:	08 95       	ret
 568:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_zero>
 56c:	67 2f       	mov	r22, r23
 56e:	78 2f       	mov	r23, r24
 570:	88 27       	eor	r24, r24
 572:	b8 5f       	subi	r27, 0xF8	; 248
 574:	39 f0       	breq	.+14     	; 0x584 <__fixunssfsi+0x4c>
 576:	b9 3f       	cpi	r27, 0xF9	; 249
 578:	cc f3       	brlt	.-14     	; 0x56c <__fixunssfsi+0x34>
 57a:	86 95       	lsr	r24
 57c:	77 95       	ror	r23
 57e:	67 95       	ror	r22
 580:	b3 95       	inc	r27
 582:	d9 f7       	brne	.-10     	; 0x57a <__fixunssfsi+0x42>
 584:	3e f4       	brtc	.+14     	; 0x594 <__fixunssfsi+0x5c>
 586:	90 95       	com	r25
 588:	80 95       	com	r24
 58a:	70 95       	com	r23
 58c:	61 95       	neg	r22
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__floatunsisf>:
 596:	e8 94       	clt
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__floatsisf+0x12>

0000059a <__floatsisf>:
 59a:	97 fb       	bst	r25, 7
 59c:	3e f4       	brtc	.+14     	; 0x5ac <__floatsisf+0x12>
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	99 23       	and	r25, r25
 5ae:	a9 f0       	breq	.+42     	; 0x5da <__floatsisf+0x40>
 5b0:	f9 2f       	mov	r31, r25
 5b2:	96 e9       	ldi	r25, 0x96	; 150
 5b4:	bb 27       	eor	r27, r27
 5b6:	93 95       	inc	r25
 5b8:	f6 95       	lsr	r31
 5ba:	87 95       	ror	r24
 5bc:	77 95       	ror	r23
 5be:	67 95       	ror	r22
 5c0:	b7 95       	ror	r27
 5c2:	f1 11       	cpse	r31, r1
 5c4:	f8 cf       	rjmp	.-16     	; 0x5b6 <__floatsisf+0x1c>
 5c6:	fa f4       	brpl	.+62     	; 0x606 <__floatsisf+0x6c>
 5c8:	bb 0f       	add	r27, r27
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__floatsisf+0x36>
 5cc:	60 ff       	sbrs	r22, 0
 5ce:	1b c0       	rjmp	.+54     	; 0x606 <__floatsisf+0x6c>
 5d0:	6f 5f       	subi	r22, 0xFF	; 255
 5d2:	7f 4f       	sbci	r23, 0xFF	; 255
 5d4:	8f 4f       	sbci	r24, 0xFF	; 255
 5d6:	9f 4f       	sbci	r25, 0xFF	; 255
 5d8:	16 c0       	rjmp	.+44     	; 0x606 <__floatsisf+0x6c>
 5da:	88 23       	and	r24, r24
 5dc:	11 f0       	breq	.+4      	; 0x5e2 <__floatsisf+0x48>
 5de:	96 e9       	ldi	r25, 0x96	; 150
 5e0:	11 c0       	rjmp	.+34     	; 0x604 <__floatsisf+0x6a>
 5e2:	77 23       	and	r23, r23
 5e4:	21 f0       	breq	.+8      	; 0x5ee <__floatsisf+0x54>
 5e6:	9e e8       	ldi	r25, 0x8E	; 142
 5e8:	87 2f       	mov	r24, r23
 5ea:	76 2f       	mov	r23, r22
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__floatsisf+0x5e>
 5ee:	66 23       	and	r22, r22
 5f0:	71 f0       	breq	.+28     	; 0x60e <__floatsisf+0x74>
 5f2:	96 e8       	ldi	r25, 0x86	; 134
 5f4:	86 2f       	mov	r24, r22
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	2a f0       	brmi	.+10     	; 0x606 <__floatsisf+0x6c>
 5fc:	9a 95       	dec	r25
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	da f7       	brpl	.-10     	; 0x5fc <__floatsisf+0x62>
 606:	88 0f       	add	r24, r24
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <__fp_inf>:
 610:	97 f9       	bld	r25, 7
 612:	9f 67       	ori	r25, 0x7F	; 127
 614:	80 e8       	ldi	r24, 0x80	; 128
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	08 95       	ret

0000061c <__fp_nan>:
 61c:	9f ef       	ldi	r25, 0xFF	; 255
 61e:	80 ec       	ldi	r24, 0xC0	; 192
 620:	08 95       	ret

00000622 <__fp_pscA>:
 622:	00 24       	eor	r0, r0
 624:	0a 94       	dec	r0
 626:	16 16       	cp	r1, r22
 628:	17 06       	cpc	r1, r23
 62a:	18 06       	cpc	r1, r24
 62c:	09 06       	cpc	r0, r25
 62e:	08 95       	ret

00000630 <__fp_pscB>:
 630:	00 24       	eor	r0, r0
 632:	0a 94       	dec	r0
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	05 06       	cpc	r0, r21
 63c:	08 95       	ret

0000063e <__fp_round>:
 63e:	09 2e       	mov	r0, r25
 640:	03 94       	inc	r0
 642:	00 0c       	add	r0, r0
 644:	11 f4       	brne	.+4      	; 0x64a <__fp_round+0xc>
 646:	88 23       	and	r24, r24
 648:	52 f0       	brmi	.+20     	; 0x65e <__fp_round+0x20>
 64a:	bb 0f       	add	r27, r27
 64c:	40 f4       	brcc	.+16     	; 0x65e <__fp_round+0x20>
 64e:	bf 2b       	or	r27, r31
 650:	11 f4       	brne	.+4      	; 0x656 <__fp_round+0x18>
 652:	60 ff       	sbrs	r22, 0
 654:	04 c0       	rjmp	.+8      	; 0x65e <__fp_round+0x20>
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__fp_split3>:
 660:	57 fd       	sbrc	r21, 7
 662:	90 58       	subi	r25, 0x80	; 128
 664:	44 0f       	add	r20, r20
 666:	55 1f       	adc	r21, r21
 668:	59 f0       	breq	.+22     	; 0x680 <__fp_splitA+0x10>
 66a:	5f 3f       	cpi	r21, 0xFF	; 255
 66c:	71 f0       	breq	.+28     	; 0x68a <__fp_splitA+0x1a>
 66e:	47 95       	ror	r20

00000670 <__fp_splitA>:
 670:	88 0f       	add	r24, r24
 672:	97 fb       	bst	r25, 7
 674:	99 1f       	adc	r25, r25
 676:	61 f0       	breq	.+24     	; 0x690 <__fp_splitA+0x20>
 678:	9f 3f       	cpi	r25, 0xFF	; 255
 67a:	79 f0       	breq	.+30     	; 0x69a <__fp_splitA+0x2a>
 67c:	87 95       	ror	r24
 67e:	08 95       	ret
 680:	12 16       	cp	r1, r18
 682:	13 06       	cpc	r1, r19
 684:	14 06       	cpc	r1, r20
 686:	55 1f       	adc	r21, r21
 688:	f2 cf       	rjmp	.-28     	; 0x66e <__fp_split3+0xe>
 68a:	46 95       	lsr	r20
 68c:	f1 df       	rcall	.-30     	; 0x670 <__fp_splitA>
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <__fp_splitA+0x30>
 690:	16 16       	cp	r1, r22
 692:	17 06       	cpc	r1, r23
 694:	18 06       	cpc	r1, r24
 696:	99 1f       	adc	r25, r25
 698:	f1 cf       	rjmp	.-30     	; 0x67c <__fp_splitA+0xc>
 69a:	86 95       	lsr	r24
 69c:	71 05       	cpc	r23, r1
 69e:	61 05       	cpc	r22, r1
 6a0:	08 94       	sec
 6a2:	08 95       	ret

000006a4 <__fp_zero>:
 6a4:	e8 94       	clt

000006a6 <__fp_szero>:
 6a6:	bb 27       	eor	r27, r27
 6a8:	66 27       	eor	r22, r22
 6aa:	77 27       	eor	r23, r23
 6ac:	cb 01       	movw	r24, r22
 6ae:	97 f9       	bld	r25, 7
 6b0:	08 95       	ret

000006b2 <__itoa_ncheck>:
 6b2:	bb 27       	eor	r27, r27
 6b4:	4a 30       	cpi	r20, 0x0A	; 10
 6b6:	31 f4       	brne	.+12     	; 0x6c4 <__itoa_ncheck+0x12>
 6b8:	99 23       	and	r25, r25
 6ba:	22 f4       	brpl	.+8      	; 0x6c4 <__itoa_ncheck+0x12>
 6bc:	bd e2       	ldi	r27, 0x2D	; 45
 6be:	90 95       	com	r25
 6c0:	81 95       	neg	r24
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__utoa_common>

000006c8 <__utoa_ncheck>:
 6c8:	bb 27       	eor	r27, r27

000006ca <__utoa_common>:
 6ca:	fb 01       	movw	r30, r22
 6cc:	55 27       	eor	r21, r21
 6ce:	aa 27       	eor	r26, r26
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	aa 1f       	adc	r26, r26
 6d6:	a4 17       	cp	r26, r20
 6d8:	10 f0       	brcs	.+4      	; 0x6de <__utoa_common+0x14>
 6da:	a4 1b       	sub	r26, r20
 6dc:	83 95       	inc	r24
 6de:	50 51       	subi	r21, 0x10	; 16
 6e0:	b9 f7       	brne	.-18     	; 0x6d0 <__utoa_common+0x6>
 6e2:	a0 5d       	subi	r26, 0xD0	; 208
 6e4:	aa 33       	cpi	r26, 0x3A	; 58
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__utoa_common+0x20>
 6e8:	a9 5d       	subi	r26, 0xD9	; 217
 6ea:	a1 93       	st	Z+, r26
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	79 f7       	brne	.-34     	; 0x6ce <__utoa_common+0x4>
 6f0:	b1 11       	cpse	r27, r1
 6f2:	b1 93       	st	Z+, r27
 6f4:	11 92       	st	Z+, r1
 6f6:	cb 01       	movw	r24, r22
 6f8:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <strrev>

000006fc <strrev>:
 6fc:	dc 01       	movw	r26, r24
 6fe:	fc 01       	movw	r30, r24
 700:	67 2f       	mov	r22, r23
 702:	71 91       	ld	r23, Z+
 704:	77 23       	and	r23, r23
 706:	e1 f7       	brne	.-8      	; 0x700 <strrev+0x4>
 708:	32 97       	sbiw	r30, 0x02	; 2
 70a:	04 c0       	rjmp	.+8      	; 0x714 <strrev+0x18>
 70c:	7c 91       	ld	r23, X
 70e:	6d 93       	st	X+, r22
 710:	70 83       	st	Z, r23
 712:	62 91       	ld	r22, -Z
 714:	ae 17       	cp	r26, r30
 716:	bf 07       	cpc	r27, r31
 718:	c8 f3       	brcs	.-14     	; 0x70c <strrev+0x10>
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
